<?php

namespace Tests\Feature;

use App\Models\Order;
use App\Models\Product;
use App\Models\User;
use App\Services\ConsumedIngredient;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class OrderTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();
        $user = User::first();
        $this->actingAs($user);
    }

    public function test_is_there_burger_product_with_its_ingredients()
    {
        $burger = Product::find(1);
        $this->assertModelExists($burger);
        $ingredients = [
            1 => ['grams_quantity' => 150],
            2 => ['grams_quantity' => 30],
            3 => ['grams_quantity' => 20],
        ];
        foreach ($ingredients as $key => $ingredient) {
            $this->assertDatabaseHas('ingredient_product', [
                'ingredient_id' => $key,
                'product_id' => $burger->id,
                'grams_quantity' => $ingredient['grams_quantity'],
            ]);
        }
    }

    public function test_is_order_url_work_and_order_added_to_database()
    {
        $burger = Product::find(1);
        $this->assertModelExists($burger);
        $response = $this->post(route('checkout', $burger->id));
        $response->assertStatus(302);
        $response->assertRedirect(route('home'));
        $orderCreated = Order::first();
        $this->assertModelExists($orderCreated);
        $this->followRedirects($response)
             ->assertSee("Order Had Been Created Successfully ( $orderCreated->reference_number )");
    }

    public function test_check_if_burger_ingredients_stock_is_correct_after_order_and_decrease()
    {
        $order = Order::first();
        $this->assertModelExists($order);
        $orderProductIngredients = $order->product->ingredients;
        foreach ($orderProductIngredients as $ingredient) {
            $getCurrentStock = (new ConsumedIngredient())->sumConsumed($ingredient->id,
                $ingredient->last_stock_update_date);
            $this->assertEquals($ingredient->pivot->grams_quantity, $getCurrentStock);
        }
    }
}
